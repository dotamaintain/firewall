import collections
import IPy
import base64
new_port_list = []
new_d_list = []
new_s_list = []
part_ip_list = []
part_port_list = []
ip_Definition = []
port_Definition = []
rule_Definition = []
rule_Definition_c = []
port_name_c = []
#导入velocity格式化后的数据
file_object = open("d:\python_files\\deny.csv")
try:
   all_the_text_old = file_object.readlines()
finally:
   file_object.close()
#将重复数据信息输出到1234.txt中
obj = collections.Counter(all_the_text_old)
f_name = open('D:\python_files\\1234.txt','w')
for k,v in obj.items():
  if v > 1:
    print(k,v, file=f_name)
f_name.close()
#由于H3系统限制对于相同策略无法刷入，故首先对策略进行去重处理
all_the_text = sorted(set(all_the_text_old), key=all_the_text_old.index)
#对相邻地址进行合并
#先合并端口
i = 0
j = 1
while i<len(all_the_text) - 1:
 part = all_the_text[i].rstrip('\n').split(',')
 while j<len(all_the_text):
   if all_the_text[i].rsplit(',',2)[0] != all_the_text[j].rsplit(',',2)[0] and j == len(all_the_text) - 1:
       if i == len(all_the_text) - 2:
           new_port_list.append(all_the_text[i])
           new_port_list.append(all_the_text[j])
           i = j
           break
       else:
           new =",".join(part)
           new_port_list.append(new)
           new_port_list.append(all_the_text[j])
           i = j
           break
   elif all_the_text[i].rsplit(',',2)[0] == all_the_text[j].rsplit(',',2)[0] and j == len(all_the_text) - 1:
       part.append(all_the_text[j].rsplit(',', 2)[1])
       part.append(all_the_text[j].rsplit(',', 2)[2].rstrip('\n'))
       new = ",".join(part)
       new_port_list.append(new)
       i = j
       break
   elif all_the_text[i].rsplit(',',2)[0] == all_the_text[j].rsplit(',',2)[0] and all_the_text[i].rsplit(',',2)[1] != all_the_text[j].rsplit(',',2)[1]:
      part.append(all_the_text[j].rsplit(',',2)[1])
      part.append(all_the_text[j].rsplit(',',2)[2].rstrip('\n'))
      j += 1
   elif all_the_text[i].rsplit(',',2)[0] != all_the_text[j].rsplit(',',2)[0] and i == j - 1:
      new_port_list.append(all_the_text[i])
      i = j
      j += 1
      break
   else:
      i = j
      j += 1
      new = ",".join(part)
      new_port_list.append(new)
      break
#for list in new_port_list:
#    print(list)
#    print(list.rstrip('\n').split(',',4))
#合并源地址
#先将list重新划分，方便后续的比对。
i = 0
j = 1
while i<len(new_port_list) - 1:
  #s_part = new_port_list[i].rstrip('\n').split(',')
  start = i
  end = 'aaa'
  while j<len(new_port_list):
    s1 = new_port_list[i].split(',')[0] + new_port_list[i].split(',')[1] + new_port_list[i].split(',')[2]
    s2 = new_port_list[j].split(',')[0] + new_port_list[j].split(',')[1] + new_port_list[j].split(',')[2]
    if s1 == s2 and new_port_list[i].split(',',4)[3] != new_port_list[j].split(',',4)[3] and  new_port_list[i].split(',',4)[4] == new_port_list[j].split(',',4)[4] and new_port_list[i].split(',',4)[3].split('/')[1] == '32' and new_port_list[j].split(',',4)[3].split('/')[1] == '32':
        n1 = int(new_port_list[i].split(',',4)[3].split('.')[3].split('/')[0])
        n2 = int(new_port_list[j].split(',',4)[3].split('.')[3].split('/')[0])
        if n1 == n2 + 1:
           end = n2
           if j < len(new_port_list) - 1:
               i = j
               j += 1
           else:
               s_range = new_port_list[start].split(',', 4)[3], str(end)
               s_range_j = '-'.join(s_range)
               part2 = []
               part2.append(new_port_list[start].split(',', 4)[0])
               part2.append(new_port_list[start].split(',', 4)[1])
               part2.append(new_port_list[start].split(',', 4)[2])
               part2.append(s_range_j)
               part2.append(new_port_list[start].split(',', 4)[4])
               #print(','.join(part2))
               new_s_list.append(','.join(part2).rstrip('\n'))
               i = j
               j += 1
               break
        elif n1 == n2 - 1:
            end = n2
            if j  < len(new_port_list) - 1:
                i  = j
                j  += 1
            else:
                s_range = new_port_list[start].split(',', 4)[3],str(end)
                s_range_j = '-'.join(s_range)
                part2 = []
                part2.append(new_port_list[start].split(',', 4)[0])
                part2.append(new_port_list[start].split(',', 4)[1])
                part2.append(new_port_list[start].split(',', 4)[2])
                part2.append(s_range_j)
                part2.append(new_port_list[start].split(',', 4)[4])
                #print(','.join(part2))
                new_s_list.append(','.join(part2).rstrip('\n'))
                i = j
                j += 1
                break
        else:
            #print(new_port_list[j])
          if j < len(new_port_list) - 1:
            if end != 'aaa':
                s_range = new_port_list[start].split(',', 4)[3],str(end)
                s_range_j = '-'.join(s_range)
                part2 = []
                part2.append(new_port_list[start].split(',', 4)[0])
                part2.append(new_port_list[start].split(',', 4)[1])
                part2.append(new_port_list[start].split(',', 4)[2])
                part2.append(s_range_j)
                part2.append(new_port_list[start].split(',', 4)[4])
                #print(','.join(part2))
                new_s_list.append(','.join(part2).rstrip('\n'))
                i = j
                j += 1
                break
            else:
                #print(new_port_list[j])
                new_s_list.append(new_port_list[i].rstrip('\n')) ##
                i = j
                j += 1
                break
          else:
              if end != 'aaa':
                  s_range = new_port_list[start].split(',', 4)[3], str(end)
                  s_range_j = '-'.join(s_range)
                  part2 = []
                  part2.append(new_port_list[start].split(',', 4)[0])
                  part2.append(new_port_list[start].split(',', 4)[1])
                  part2.append(new_port_list[start].split(',', 4)[2])
                  part2.append(s_range_j)
                  part2.append(new_port_list[start].split(',', 4)[4])
                  # print(','.join(part2))
                  new_s_list.append(','.join(part2).rstrip('\n'))
                  # print(new_port_list[j])
                  new_s_list.append(new_port_list[j].rstrip('\n'))
                  i = j
                  j += 1
                  break
              else:
                  # print(new_port_list[i])
                  new_s_list.append(new_port_list[i].rstrip('\n'))
                  # print(new_port_list[j])
                  new_s_list.append(new_port_list[j].rstrip('\n'))
                  i = j
                  j += 1
    else:
        if j < len(new_port_list) - 1:
           if end != 'aaa':
              s_range = new_port_list[start].split(',', 4)[3], str(end)
              s_range_j = '-'.join(s_range)
              part2 = []
              part2.append(new_port_list[start].split(',', 4)[0])
              part2.append(new_port_list[start].split(',', 4)[1])
              part2.append(new_port_list[start].split(',', 4)[2])
              part2.append(s_range_j)
              part2.append(new_port_list[start].split(',', 4)[4])
              #print(','.join(part2))
              new_s_list.append(','.join(part2).rstrip('\n'))
              i = j
              j += 1
              break
           else:
              #print(new_port_list[i])
              new_s_list.append(new_port_list[i].rstrip('\n')) ##
              i = j
              j += 1
              break
        else:
            if end != 'aaa':
                s_range = new_port_list[start].split(',', 4)[3], str(end)
                s_range_j = '-'.join(s_range)
                part2 = []
                part2.append(new_port_list[start].split(',', 4)[0])
                part2.append(new_port_list[start].split(',', 4)[1])
                part2.append(new_port_list[start].split(',', 4)[2])
                part2.append(s_range_j)
                part2.append(new_port_list[start].split(',', 4)[4])
                #print(','.join(part2))
                new_s_list.append(','.join(part2).rstrip('\n'))
                #print(new_port_list[j])
                new_s_list.append(new_port_list[j].rstrip('\n'))
                i = j
                j += 1
                break
            else:
                #print(new_port_list[i])
                new_s_list.append(new_port_list[i].rstrip('\n'))
                #print(new_port_list[j])
                new_s_list.append(new_port_list[j].rstrip('\n'))
                i = j
                j += 1
#for list in new_s_list:
#    print(list)
#将目的地址合并
i = 0
while i < len(new_s_list) - 1:
    tmp = new_s_list[i].split(',')
    if len(tmp[4].split('/')) < 2:
        x = tmp[4],str('32')
        tmp[4] = '/'.join(x)
        fu = ','.join(tmp)
        new_s_list[i] = fu
    i += 1
i = 0
j = 1
while i<len(new_s_list) - 1:
  start = i
  end = 'aaa'
  while j<len(new_s_list):
    s1 = new_s_list[i].split(',')[0] + new_s_list[i].split(',')[1] + new_s_list[i].split(',')[2] + new_s_list[i].split(',')[3]
    s2 = new_s_list[j].split(',')[0] + new_s_list[j].split(',')[1] + new_s_list[j].split(',')[2] + new_s_list[j].split(',')[3]
    if s1 == s2 and new_s_list[i].split(',',5)[4] != new_s_list[j].split(',',5)[4] and  new_s_list[i].split(',',5)[5] == new_s_list[j].split(',',5)[5] and new_s_list[i].split(',',5)[4].split('/')[1] == '32' and new_s_list[j].split(',',5)[4].split('/')[1] == '32':
        n1 = int(new_s_list[i].split(',',5)[4].split('.')[3].split('/')[0])
        n2 = int(new_s_list[j].split(',',5)[4].split('.')[3].split('/')[0])
        if n1 == n2 + 1:
           end = n2
           if j < len(new_s_list) - 1:
               i = j
               j += 1
           else:
               d_range = new_s_list[start].split(',', 5)[4], str(end)
               d_range_j = '-'.join(d_range)
               part2 = []
               part2.append(new_s_list[start].split(',', 5)[0])
               part2.append(new_s_list[start].split(',', 5)[1])
               part2.append(new_s_list[start].split(',', 5)[2])
               part2.append(new_s_list[start].split(',', 5)[3])
               part2.append(d_range_j)
               part2.append(new_s_list[start].split(',', 5)[5])
               #print(','.join(part2))
               new_d_list.append(','.join(part2).rstrip('\n'))
               i = j
               j += 1
               break
        elif n1 == n2 - 1:
            end = n2
            if j  < len(new_s_list) - 1:
                i = j
                j += 1
            else:
                d_range = new_s_list[start].split(',', 5)[4],str(end)
                d_range_j = '-'.join(d_range)
                part2 = []
                part2.append(new_s_list[start].split(',', 5)[0])
                part2.append(new_s_list[start].split(',', 5)[1])
                part2.append(new_s_list[start].split(',', 5)[2])
                part2.append(new_s_list[start].split(',', 5)[3])
                part2.append(d_range_j)
                part2.append(new_s_list[start].split(',', 5)[5])
                #print(','.join(part2))
                new_d_list.append(','.join(part2).rstrip('\n'))
                i = j
                j += 1
                break
        else:
          if j < len(new_s_list) - 1:
            if end != 'aaa':
                d_range = new_s_list[start].split(',', 5)[4],str(end)
                d_range_j = '-'.join(d_range)
                part2 = []
                part2.append(new_s_list[start].split(',', 5)[0])
                part2.append(new_s_list[start].split(',', 5)[1])
                part2.append(new_s_list[start].split(',', 5)[2])
                part2.append(new_s_list[start].split(',', 5)[3])
                part2.append(d_range_j)
                part2.append(new_s_list[start].split(',', 5)[5])
                #print(','.join(part2))
                new_d_list.append(','.join(part2).rstrip('\n'))
                i = j
                j += 1
                break
            else:
                #print(new_s_list[j])
                new_d_list.append(new_s_list[i].rstrip('\n')) ##
                i = j
                j += 1
                break
          else:
              if end != 'aaa':
                  d_range = new_s_list[start].split(',', 5)[4], str(end)
                  d_range_j = '-'.join(d_range)
                  part2 = []
                  part2.append(new_s_list[start].split(',', 5)[0])
                  part2.append(new_s_list[start].split(',', 5)[1])
                  part2.append(new_s_list[start].split(',', 5)[2])
                  part2.append(new_s_list[start].split(',', 5)[3])
                  part2.append(d_range_j)
                  part2.append(new_s_list[start].split(',', 5)[5])
                  # print(','.join(part2))
                  new_d_list.append(','.join(part2).rstrip('\n'))
                  # print(new_s_list[j])
                  new_d_list.append(new_s_list[j].rstrip('\n'))
                  i = j
                  j += 1
                  break
              else:
                  # print(new_s_list[i])
                  new_d_list.append(new_s_list[i].rstrip('\n'))
                  # print(new_s_list[j])
                  new_d_list.append(new_s_list[j].rstrip('\n'))
                  i = j
                  j += 1
    else:
        if j < len(new_s_list) - 1:
           if end != 'aaa':
              d_range = new_s_list[start].split(',', 5)[4], str(end)
              d_range_j = '-'.join(d_range)
              part2 = []
              part2.append(new_s_list[start].split(',', 5)[0])
              part2.append(new_s_list[start].split(',', 5)[1])
              part2.append(new_s_list[start].split(',', 5)[2])
              part2.append(new_s_list[start].split(',', 5)[3])
              part2.append(d_range_j)
              part2.append(new_s_list[start].split(',', 5)[5])
              #print(','.join(part2))
              new_d_list.append(','.join(part2).rstrip('\n'))
              i = j
              j += 1
              break
           else:
              #print(new_s_list[j])
              new_d_list.append(new_s_list[i].rstrip('\n')) ##
              i = j
              j += 1
              break
        else:
            if end != 'aaa':
                d_range = new_s_list[start].split(',', 5)[4], str(end)
                d_range_j = '-'.join(d_range)
                part2 = []
                part2.append(new_s_list[start].split(',', 5)[0])
                part2.append(new_s_list[start].split(',', 5)[1])
                part2.append(new_s_list[start].split(',', 5)[2])
                part2.append(new_s_list[start].split(',', 5)[3])
                part2.append(d_range_j)
                part2.append(new_s_list[start].split(',', 5)[5])
                #print(','.join(part2))
                new_d_list.append(','.join(part2).rstrip('\n'))
                #print(new_s_list[j])
                new_d_list.append(new_s_list[j].rstrip('\n'))
                i = j
                j += 1
                break
            else:
                #print(new_s_list[i])
                new_d_list.append(new_s_list[i].rstrip('\n'))
                #print(new_s_list[j])
                new_d_list.append(new_s_list[j].rstrip('\n'))
                i = j
                j += 1
#由于临时发现条件判断有漏洞，会导致数据重复，故这里对new_d_list去重操作。
#new_d_list_old = new_d_list
#new_d_list = sorted(set(new_d_list_old), key=new_d_list_old.index)
#for list in new_d_list:
#   print(list)


#格式化输出格式
#1、将源目地址和端口进行压站。
for list in new_d_list:
    part_ip_list.append(list.split(',')[3])
    part_ip_list.append(list.split(',')[4])
    port_p = []
    port_p.append(list.split(',')[2])
    port_p.append(list.split(',',5)[5].rstrip('\n'))
    part_port_list.append('<->'.join(port_p))
#2、去重
part_ip_list = set(part_ip_list)
part_port_list = set(part_port_list)
#3、定义IP
for list in part_ip_list:
    ip_Definition.append("object-group ip address group_"+list.rstrip('\n'))
    if len(list.split('-')) > 1 :
        no = 0
        #ip_Definition.append("0 network range " + list.split('/')[0]+" "+list.rsplit('.',1)[0]+"."+list.split('-')[1])
        #ip_Definition.append("#")
        start_ip = int(list.rsplit('/',1)[0].rsplit('.',1)[1])
        end_ip = int(list.rsplit('-', 1)[1])
        if (start_ip < end_ip):
            while (start_ip <= end_ip):
                ip_Definition.append(str(no) + " network host address " + list.rsplit('/',1)[0].rsplit('.',1)[0] + "." + str(start_ip))
                start_ip += 1
                no += 1
        else:
            while (start_ip >= end_ip):
                ip_Definition.append(str(no) + " network host address " + list.rsplit('/', 1)[0].rsplit('.', 1)[0] + "." + str(end_ip))
                end_ip += 1
                no += 1
            ip_Definition.append('#')
    else:
        if  len(list.split('/')) > 1 and list.split('/')[1] == '32':
            ip_Definition.append("0 network host address " + list.split('/')[0])
            ip_Definition.append("#")
        else:
            ip_Definition.append("0 network subnet " + IPy.IP(list).strNormal(2).replace('/',' '))
            ip_Definition.append("#")
#for list in ip_Definition:
#   print(list)
#4、定义端口
w = 0
for list in part_port_list:
    l = len(list.split('<->')[1].split(','))
    if l > 2:
        x = []
        x = list.split('<->')[1].split(',')
        y = sorted(set(x),key=x.index)
        z = ''.join(y)
        u = list.split('<->')[0]+"-"+z+"-"+str(l)+"<->group_port"+str(w)
        port_name_c.append(u)
        port_Definition.append("object-group service group_port" + str(w))
        w += 1
        a = 0
        b = 1
        i = 0
        while b < l:
            if list.split('<->')[1].split(',')[a] == list.split('<->')[1].split(',')[b]:
                port_Definition.append(str(i)+" service "+list.split('<->')[0]+" destination eq "+list.split('<->')[1].split(',')[a])
                a += 2
                b += 2
                i += 1
            else:
                port_Definition.append(str(i) + " service " + list.split('<->')[0] + " destination range "+list.split('<->')[1].split(',')[a]+" "+list.split('<->')[1].split(',')[b])
                a += 2
                b += 2
                i += 1
        port_Definition.append('#')
    elif list.split('<->')[1].split(',')[0] != 'any':
        if list.split('<->')[1].split(',')[0] == list.split('<->')[1].split(',')[1]:
            port_Definition.append("object-group service " +list.split('<->')[0]+"-"+list.split('<->')[1].split(',')[0])
            port_Definition.append("0 service "+list.split('<->')[0]+" destination eq " + list.split('<->')[1].split(',')[0])
            port_Definition.append('#')
        else:
            port_Definition.append("object-group service " +list.split('<->')[0]+"-"+list.split('<->')[1].split(',')[0]+':'+list.split('<->')[1].split(',')[1])
            port_Definition.append("0 service "+list.split('<->')[0]+" destination range " + list.split('<->')[1].split(',')[0]+' '+list.split('<->')[1].split(',')[1])
            port_Definition.append('#')
#对于非标准端口进行补充定义
port_Definition.append("object-group service ip-any")
port_Definition.append("0 service 4")
port_Definition.append("#")
port_Definition.append("object-group service icmp-any")
port_Definition.append("0 service 1")
port_Definition.append("#")
port_Definition.append("object-group service ospf-any")
port_Definition.append("0 service 89")
port_Definition.append("#")
port_Definition.append("object-group service tcp-any")
port_Definition.append("0 service 6")
port_Definition.append("#")
#定义策略组
i = 0
for xp in range(len(new_d_list)):
    np = xp - 1
    if new_d_list[xp].split(',')[0] != new_d_list[np].split(',')[0] and xp != 0:
      i = 0
    else:
      i = i
    l = len(new_d_list[xp].split(',',5)[5].split(','))
    rule_Definition.append("object-policy ip " + new_d_list[xp].split('<->')[0])
    if new_d_list[xp].split(',')[1] == 'permit':
        if l > 2:
            x = []
            x = new_d_list[xp].split(',',5)[5].split(',')
            y = sorted(set(x), key=x.index)
            z = ''.join(y)
            rule_Definition.append("rule " + str(i) + " pass source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" +new_d_list[xp].split(",")[4] + " service <-> "+new_d_list[xp].split(',')[2]+"-"+z+"-"+str(l))
            i += 2
            rule_Definition.append("#")
        elif new_d_list[xp].split(',',5)[5].split(',')[0] == 'any':
            if new_d_list[xp].split(',')[2] == 'all':
                rule_Definition.append("rule " + str(i) + " pass source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service any")
                rule_Definition.append("#")
                i += 2
            else:
                rule_Definition.append("rule " + str(i) + " pass source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service "+new_d_list[xp].split(',')[2]+'-any')
                rule_Definition.append("#")
                i += 2
        else:
            if new_d_list[xp].split(',',5)[5].split(',')[0] == new_d_list[xp].split(',',5)[5].split(',')[1]:
                rule_Definition.append("rule " + str(i) + " pass source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service " + new_d_list[xp].split(',')[2] + "-" + new_d_list[xp].split(',',5)[5].split(',')[0])
                i += 2
                rule_Definition.append("#")
            else:
                rule_Definition.append("rule " + str(i) + " pass source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service " + new_d_list[xp].split(',')[2] + "-" +new_d_list[xp].split(',', 5)[5].split(',')[0]+":"+new_d_list[xp].split(',', 5)[5].split(',')[1])
                i += 2
                rule_Definition.append("#")
    else:
        if l > 2:
            x = []
            x = new_d_list[xp].split(',',5)[5].split(',')
            y = sorted(set(x), key=x.index)
            z = ''.join(y)
            rule_Definition.append("rule " + str(i) + " drop source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" +new_d_list[xp].split(",")[4] + " service <-> "+new_d_list[xp].split(',')[2]+"-"+z+"-"+str(l))
            i += 2
            rule_Definition.append("#")
        elif new_d_list[xp].split(',', 5)[5].split(',')[0] == 'any':
            if new_d_list[xp].split(',')[2] == 'all':
                rule_Definition.append("rule " + str(i) + " drop source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service any")
                rule_Definition.append("#")
                i += 2
            else:
                rule_Definition.append("rule " + str(i) + " drop source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service " + new_d_list[xp].split(',')[2] + '-any')
                rule_Definition.append("#")
                i += 2
        else:
            if new_d_list[xp].split(',',5)[5].split(',')[0] == new_d_list[xp].split(',',5)[5].split(',')[1]:
                rule_Definition.append("rule " + str(i) + " drop source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service " + new_d_list[xp].split(',')[2] + "-" + new_d_list[xp].split(',',5)[5].split(',')[0])
                i += 2
                rule_Definition.append("#")
            else:
                rule_Definition.append("rule " + str(i) + " drop source-ip " + "group_" + new_d_list[xp].split(",")[3] + " destination-ip " + "group_" + new_d_list[xp].split(",")[4] + " service " + new_d_list[xp].split(',')[2] + "-" +new_d_list[xp].split(',', 5)[5].split(',')[0]+":"+new_d_list[xp].split(',', 5)[5].split(',')[1])
                i += 2
                rule_Definition.append("#")



for list in rule_Definition:
    if len(list.split("<->")) > 1:
        j = 0
        while j< len(port_name_c):
            if list.split("<->")[1].replace(' ', '') == port_name_c[j].split("<->")[0].replace(' ', ''):
             p = list.split("<->")[0]+" "+port_name_c[j].split("<->")[1]
             rule_Definition_c.append(p)
             break
            else:
             j += 1
    else:
        rule_Definition_c.append(list)


comparison = []
for list in new_d_list:
   if list.split(',',5)[5].split(',')[0] != 'any':
       xlp = []
       a = list.split(',',5)[5].split(',')
       for list1 in a:
          xlp.append(int(list1))
       xlp.sort()
       b = [str(i) for i in xlp]
       c = "-".join(b)
       d = list.split(',',5)[0]+','+list.split(',',5)[1]+','+list.split(',',5)[2]+','+list.split(',',5)[3]+','+list.split(',',5)[4]+','+c
       comparison.append(d)
   else:
       e = list.split(',', 5)[0] + ',' + list.split(',', 5)[1] + ',' + list.split(',', 5)[2] + ',' + list.split(',', 5)[
       3] + ',' + list.split(',', 5)[4] + ',' + list.split(',',5)[5].replace(',','-')
       comparison.append(e)

f_name = open('D:\python_files\out.txt','w')
#for list in comparison:
#   print(list, file=f_name)
for list in ip_Definition:
    print(list, file=f_name)
for list in port_Definition:
    print(list, file=f_name)
for list in rule_Definition_c:
    print(list, file=f_name)
f_name.close()







